// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: product_price_fees.proto

package stubs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductPriceFeesServiceClient is the client API for ProductPriceFeesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductPriceFeesServiceClient interface {
	CreateProductPriceFee(ctx context.Context, in *ProductPriceFeeRequest, opts ...grpc.CallOption) (*ProductPriceFeeResponse, error)
	GetProductPriceFee(ctx context.Context, in *GetProductPriceFeeRequest, opts ...grpc.CallOption) (*GetProductPriceFeeResponse, error)
	UpdateProductPriceFee(ctx context.Context, in *ProductPriceFeeRequest, opts ...grpc.CallOption) (*ProductPriceFeeResponse, error)
	DeleteProductPriceFee(ctx context.Context, in *DeleteProductPriceFeeRequest, opts ...grpc.CallOption) (*ProductPriceFeeResponse, error)
}

type productPriceFeesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductPriceFeesServiceClient(cc grpc.ClientConnInterface) ProductPriceFeesServiceClient {
	return &productPriceFeesServiceClient{cc}
}

func (c *productPriceFeesServiceClient) CreateProductPriceFee(ctx context.Context, in *ProductPriceFeeRequest, opts ...grpc.CallOption) (*ProductPriceFeeResponse, error) {
	out := new(ProductPriceFeeResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductPriceFeesService/CreateProductPriceFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productPriceFeesServiceClient) GetProductPriceFee(ctx context.Context, in *GetProductPriceFeeRequest, opts ...grpc.CallOption) (*GetProductPriceFeeResponse, error) {
	out := new(GetProductPriceFeeResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductPriceFeesService/GetProductPriceFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productPriceFeesServiceClient) UpdateProductPriceFee(ctx context.Context, in *ProductPriceFeeRequest, opts ...grpc.CallOption) (*ProductPriceFeeResponse, error) {
	out := new(ProductPriceFeeResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductPriceFeesService/UpdateProductPriceFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productPriceFeesServiceClient) DeleteProductPriceFee(ctx context.Context, in *DeleteProductPriceFeeRequest, opts ...grpc.CallOption) (*ProductPriceFeeResponse, error) {
	out := new(ProductPriceFeeResponse)
	err := c.cc.Invoke(ctx, "/proto.ProductPriceFeesService/DeleteProductPriceFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductPriceFeesServiceServer is the server API for ProductPriceFeesService service.
// All implementations must embed UnimplementedProductPriceFeesServiceServer
// for forward compatibility
type ProductPriceFeesServiceServer interface {
	CreateProductPriceFee(context.Context, *ProductPriceFeeRequest) (*ProductPriceFeeResponse, error)
	GetProductPriceFee(context.Context, *GetProductPriceFeeRequest) (*GetProductPriceFeeResponse, error)
	UpdateProductPriceFee(context.Context, *ProductPriceFeeRequest) (*ProductPriceFeeResponse, error)
	DeleteProductPriceFee(context.Context, *DeleteProductPriceFeeRequest) (*ProductPriceFeeResponse, error)
	mustEmbedUnimplementedProductPriceFeesServiceServer()
}

// UnimplementedProductPriceFeesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductPriceFeesServiceServer struct {
}

func (UnimplementedProductPriceFeesServiceServer) CreateProductPriceFee(context.Context, *ProductPriceFeeRequest) (*ProductPriceFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductPriceFee not implemented")
}
func (UnimplementedProductPriceFeesServiceServer) GetProductPriceFee(context.Context, *GetProductPriceFeeRequest) (*GetProductPriceFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductPriceFee not implemented")
}
func (UnimplementedProductPriceFeesServiceServer) UpdateProductPriceFee(context.Context, *ProductPriceFeeRequest) (*ProductPriceFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductPriceFee not implemented")
}
func (UnimplementedProductPriceFeesServiceServer) DeleteProductPriceFee(context.Context, *DeleteProductPriceFeeRequest) (*ProductPriceFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductPriceFee not implemented")
}
func (UnimplementedProductPriceFeesServiceServer) mustEmbedUnimplementedProductPriceFeesServiceServer() {
}

// UnsafeProductPriceFeesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductPriceFeesServiceServer will
// result in compilation errors.
type UnsafeProductPriceFeesServiceServer interface {
	mustEmbedUnimplementedProductPriceFeesServiceServer()
}

func RegisterProductPriceFeesServiceServer(s grpc.ServiceRegistrar, srv ProductPriceFeesServiceServer) {
	s.RegisterService(&ProductPriceFeesService_ServiceDesc, srv)
}

func _ProductPriceFeesService_CreateProductPriceFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductPriceFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductPriceFeesServiceServer).CreateProductPriceFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductPriceFeesService/CreateProductPriceFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductPriceFeesServiceServer).CreateProductPriceFee(ctx, req.(*ProductPriceFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductPriceFeesService_GetProductPriceFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductPriceFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductPriceFeesServiceServer).GetProductPriceFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductPriceFeesService/GetProductPriceFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductPriceFeesServiceServer).GetProductPriceFee(ctx, req.(*GetProductPriceFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductPriceFeesService_UpdateProductPriceFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductPriceFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductPriceFeesServiceServer).UpdateProductPriceFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductPriceFeesService/UpdateProductPriceFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductPriceFeesServiceServer).UpdateProductPriceFee(ctx, req.(*ProductPriceFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductPriceFeesService_DeleteProductPriceFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductPriceFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductPriceFeesServiceServer).DeleteProductPriceFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductPriceFeesService/DeleteProductPriceFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductPriceFeesServiceServer).DeleteProductPriceFee(ctx, req.(*DeleteProductPriceFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductPriceFeesService_ServiceDesc is the grpc.ServiceDesc for ProductPriceFeesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductPriceFeesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProductPriceFeesService",
	HandlerType: (*ProductPriceFeesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProductPriceFee",
			Handler:    _ProductPriceFeesService_CreateProductPriceFee_Handler,
		},
		{
			MethodName: "GetProductPriceFee",
			Handler:    _ProductPriceFeesService_GetProductPriceFee_Handler,
		},
		{
			MethodName: "UpdateProductPriceFee",
			Handler:    _ProductPriceFeesService_UpdateProductPriceFee_Handler,
		},
		{
			MethodName: "DeleteProductPriceFee",
			Handler:    _ProductPriceFeesService_DeleteProductPriceFee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_price_fees.proto",
}
